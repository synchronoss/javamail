diff --git a/1.5.2/src/main/java/com/sun/mail/imap/protocol/FetchResponse.java b/1.5.2/src/main/java/com/sun/mail/imap/protocol/FetchResponse.java
index 3833d7e..ad1e6c0 100644
--- a/1.5.2/src/main/java/com/sun/mail/imap/protocol/FetchResponse.java
+++ b/1.5.2/src/main/java/com/sun/mail/imap/protocol/FetchResponse.java
@@ -40,10 +40,18 @@
 
 package com.sun.mail.imap.protocol;
 
-import java.io.*;
-import java.util.*;
-import com.sun.mail.util.*;
-import com.sun.mail.iap.*;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import com.sun.mail.iap.ByteArray;
+import com.sun.mail.iap.ParsingException;
+import com.sun.mail.iap.Protocol;
+import com.sun.mail.iap.ProtocolException;
+import com.sun.mail.iap.Response;
+import com.sun.mail.util.ASCIIUtility;
 
 /**
  * This class represents a FETCH response obtained from the input stream
@@ -68,7 +76,7 @@ public class FetchResponse extends IMAPResponse {
     private Map extensionItems;
     private final FetchItem[] fitems;
 
-    public FetchResponse(Protocol p) 
+    public FetchResponse(Protocol p)
 		throws IOException, ProtocolException {
 	super(p);
 	fitems = null;
@@ -259,7 +267,7 @@ public class FetchResponse extends IMAPResponse {
 	    if (match(MODSEQ.name))
 		return new MODSEQ(this);
 	    break;
-	default: 
+	default:
 	    break;
 	}
 	return null;
@@ -368,6 +376,7 @@ public class FetchResponse extends IMAPResponse {
                 }
                 else {
                     s = FLState.QUOTE1;
+                    index--;//re-check double quote
                 }
                 break;
             case QUOTE1:
diff --git a/1.5.2/src/test/java/com/sun/mail/imap/IMAPStoreTest.java b/1.5.2/src/test/java/com/sun/mail/imap/IMAPStoreTest.java
index d02709a..95c42ed 100644
--- a/1.5.2/src/test/java/com/sun/mail/imap/IMAPStoreTest.java
+++ b/1.5.2/src/test/java/com/sun/mail/imap/IMAPStoreTest.java
@@ -21,7 +21,9 @@ public class IMAPStoreTest {
 
     @Before
     public void setUp() throws MessagingException {
-        final int port = 143;
+        // first 1024 ports are restricted to root access only on Linux
+
+        final int port = 1143;
         server = new MockIMAPServer(port, 20);
         server.start();
 
@@ -33,7 +35,6 @@ public class IMAPStoreTest {
         Session session = Session.getInstance(props);
         store = (IMAPStore) session.getStore("imap");
         store.connect(host, port, username, password);
-
     }
 
     @After
diff --git a/1.5.2/src/test/java/com/sun/mail/imap/protocol/FetchResponseTest.java b/1.5.2/src/test/java/com/sun/mail/imap/protocol/FetchResponseTest.java
new file mode 100644
index 0000000..7b69e0f
--- /dev/null
+++ b/1.5.2/src/test/java/com/sun/mail/imap/protocol/FetchResponseTest.java
@@ -0,0 +1,112 @@
+package com.sun.mail.imap.protocol;
+
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.nio.charset.StandardCharsets;
+import java.util.Random;
+
+import com.sun.mail.iap.ParsingException;
+
+import org.junit.Test;
+
+public class FetchResponseTest {
+
+    @Test(expected = ParsingException.class)
+    public void emptyFirstlineResponse() throws Exception {
+        // When
+        final FetchResponse r = new FetchResponse(new IMAPResponse("* 1 FETCH (FIRSTLINE ())"));
+
+        // Then
+        assertEquals(1, r.getItemCount());
+        assertTrue(r.getItem(0) instanceof FIRSTLINE);
+
+        final FIRSTLINE firstline = (FIRSTLINE) r.getItem(0);
+
+        assertTrue(firstline.firstLine.isEmpty());
+        assertEquals(0, firstline.firstLineAsBytes.length);
+    }
+
+    @Test
+    public void blankFirstlineResponse() throws Exception {
+        // When
+        final FetchResponse r = new FetchResponse(new IMAPResponse("* 1 FETCH (FIRSTLINE (\"\"))"));
+
+        // Then
+        assertEquals(1, r.getItemCount());
+        assertTrue(r.getItem(0) instanceof FIRSTLINE);
+
+        final FIRSTLINE firstline = (FIRSTLINE) r.getItem(0);
+
+        assertTrue(firstline.firstLine.isEmpty());
+        assertEquals(0, firstline.firstLineAsBytes.length);
+    }
+
+    @Test
+    public void textOnlyFirstlineResponse() throws Exception {
+        // Given
+        final String str = "abcdef";
+        final byte[] bytes = str.getBytes(StandardCharsets.UTF_8);
+
+        // When
+        final FetchResponse r = new FetchResponse(
+                new IMAPResponse(String.format("* 1 FETCH (FIRSTLINE (\"%s\"))", str)));
+
+        // Then
+        assertEquals(1, r.getItemCount());
+        assertTrue(r.getItem(0) instanceof FIRSTLINE);
+
+        final FIRSTLINE firstline = (FIRSTLINE) r.getItem(0);
+
+        assertFalse(firstline.firstLine.isEmpty());
+        assertEquals(str, firstline.firstLine);
+        assertEquals(bytes.length, firstline.firstLineAsBytes.length);
+        assertArrayEquals(bytes, bytes);
+    }
+
+    @Test
+    public void textAndSizeFirstlineResponse() throws Exception {
+        // Given
+        final String str = "abcdef";
+        final byte[] bytes = str.getBytes(StandardCharsets.UTF_8);
+
+        // When
+        final FetchResponse r = new FetchResponse(
+                new IMAPResponse(String.format("* 1 FETCH (FIRSTLINE (\"{%d}\r\n%s\"))", str.length(), str)));
+
+        // Then
+        assertEquals(1, r.getItemCount());
+        assertTrue(r.getItem(0) instanceof FIRSTLINE);
+
+        final FIRSTLINE firstline = (FIRSTLINE) r.getItem(0);
+
+        assertFalse(firstline.firstLine.isEmpty());
+        assertEquals(str, firstline.firstLine);
+        assertEquals(bytes.length, firstline.firstLineAsBytes.length);
+        assertArrayEquals(bytes, bytes);
+    }
+
+    @Test(expected = ParsingException.class)
+    public void invalidFirstlineResponse() throws Exception {
+        // Given
+        final byte[] bytes = new byte[10];
+        new Random().nextBytes(bytes);
+        final String str = new String(bytes, StandardCharsets.UTF_8);
+
+        // When
+        final FetchResponse r = new FetchResponse(new IMAPResponse(String.format("* 1 FETCH (FIRSTLINE (\"{%d}\r\n%s\"))", str.length() + 2, str)));
+
+        // Then
+        assertEquals(1, r.getItemCount());
+        assertTrue(r.getItem(0) instanceof FIRSTLINE);
+
+        final FIRSTLINE firstline = (FIRSTLINE)r.getItem(0);
+
+        assertFalse(firstline.firstLine.isEmpty());
+        assertEquals(str, firstline.firstLine);
+        assertEquals(bytes.length, firstline.firstLineAsBytes.length);
+        assertArrayEquals(bytes, bytes);
+    }
+}
\ No newline at end of file
