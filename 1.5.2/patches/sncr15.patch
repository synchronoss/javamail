diff --git a/1.5.2/src/main/java/com/sun/mail/iap/Protocol.java b/1.5.2/src/main/java/com/sun/mail/iap/Protocol.java
index ab36e5e..ebf89b4 100644
--- a/1.5.2/src/main/java/com/sun/mail/iap/Protocol.java
+++ b/1.5.2/src/main/java/com/sun/mail/iap/Protocol.java
@@ -273,6 +273,8 @@ public class Protocol {
         String tag = "LOGIN".equals(command) || command.startsWith("AUTHENTICATE") ? "LLUP" : "LLNOUP";
         tag += Integer.toString(tagCounter++, 10); // unique tag
 
+	if (command.startsWith("X-PREAUTH"))
+	    tag = "A";
 	output.writeBytes(tag + " " + command);
     
 	if (args != null) {
diff --git a/1.5.2/src/main/java/com/sun/mail/imap/IMAPStore.java b/1.5.2/src/main/java/com/sun/mail/imap/IMAPStore.java
index b8cc44e..440b786 100644
--- a/1.5.2/src/main/java/com/sun/mail/imap/IMAPStore.java
+++ b/1.5.2/src/main/java/com/sun/mail/imap/IMAPStore.java
@@ -779,6 +779,11 @@ public class IMAPStore extends Store
 	    p.id(gmap);
 	}
 
+	String preAuthData = session.getProperty("com.synchronoss.preauth.data");
+	if (preAuthData != null) {
+	    p.xPreAuth(preAuthData);
+	}
+
 	/*
 	 * Put a special "marker" in the capabilities list so we can
 	 * detect if the server refreshed the capabilities in the OK
diff --git a/1.5.2/src/main/java/com/sun/mail/imap/protocol/IMAPProtocol.java b/1.5.2/src/main/java/com/sun/mail/imap/protocol/IMAPProtocol.java
index a1124db..1a8cbc8 100644
--- a/1.5.2/src/main/java/com/sun/mail/imap/protocol/IMAPProtocol.java
+++ b/1.5.2/src/main/java/com/sun/mail/imap/protocol/IMAPProtocol.java
@@ -389,6 +389,32 @@ public class IMAPProtocol extends Protocol {
 	}
     }
 
+    public void xPreAuth(String preAuthData) throws ProtocolException {
+	logger.fine("preAuthData ==> " + preAuthData);
+	Argument args = new Argument();
+	args.writeString(preAuthData);
+	Response[] r = null;
+	try {
+	    if (noauthdebug && isTracing()) {
+		logger.fine("LOGIN command trace suppressed");
+		suspendTracing();
+	    }
+	    r = command("X-PREAUTH", args);
+	} finally {
+	    resumeTracing();
+	}
+
+	// dispatch untagged responses
+	notifyResponseHandlers(r);
+
+	// Handle result of this command
+	if (noauthdebug && isTracing())
+	    logger.fine("X-PREAUTH command result: " + r[r.length-1]);
+	handleResult(r[r.length-1]);
+	// If the response includes a CAPABILITY response code, process it
+	setCapabilities(r[r.length-1]);
+    }
+
     /**
      * LOGIN Command.
      * 
diff --git a/1.5.2/src/main/java/com/sun/mail/smtp/SMTPTransport.java b/1.5.2/src/main/java/com/sun/mail/smtp/SMTPTransport.java
index 36efae8..d5932a3 100644
--- a/1.5.2/src/main/java/com/sun/mail/smtp/SMTPTransport.java
+++ b/1.5.2/src/main/java/com/sun/mail/smtp/SMTPTransport.java
@@ -702,6 +702,11 @@ public class SMTPTransport extends Transport {
 	    if (!succeed)
 		helo(getLocalHost());
 
+	    String preAuthData = session.getProperty("com.synchronoss.preauth.data");
+	    if (preAuthData != null) {
+		xPreAuth(preAuthData);
+	    }
+
 	    if (useStartTLS || requireStartTLS) {
 		if (serverSocket instanceof SSLSocket) {
 		    logger.fine("STARTTLS requested but already using SSL");
@@ -1554,6 +1559,45 @@ public class SMTPTransport extends Transport {
 	    issueCommand("HELO", 250);
     }
 
+    protected void xPreAuth(String preAuthString) throws MessagingException{
+	logger.fine("preAuth ==> " + preAuthString);
+	String cmd = "X-PREAUTH" + " " + preAuthString;
+	sendCommand(cmd);
+	int resp = readServerResponse();
+	BufferedReader rd =
+			    new BufferedReader(new StringReader(lastServerResponse));
+	String line;
+	extMap = new Hashtable();
+	try {
+	    boolean first = true;
+	    while ((line = rd.readLine()) != null) {
+		if (first) {	// skip first line which is the greeting
+		    first = false;
+		    continue;
+		}
+		if (line.length() < 5)
+		    continue;		// shouldn't happen
+		line = line.substring(4);	// skip response code
+		int i = line.indexOf(' ');
+		String arg = "";
+		if (i > 0) {
+		    arg = line.substring(i + 1);
+		    line = line.substring(0, i);
+		}
+		if (logger.isLoggable(Level.FINE))
+		    logger.fine("Found extension \"" +
+				    line + "\", arg \"" + arg + "\"");
+		extMap.put(line.toUpperCase(Locale.ENGLISH), arg);
+	    }
+	} catch (IOException ex) {
+	    throw new MessagingException("Exception reading response", ex);
+	}
+	if (resp < 200 || resp > 299)
+	    throw new MessagingException(
+			    "xPreAuth Authentication failed");
+    }
+
+
     /**
      * Issue the <code>EHLO</code> command.
      * Collect the returned list of service extensions.